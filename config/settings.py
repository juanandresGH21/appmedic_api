"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import mimetypes
mimetypes.add_type("image/svg+xml", ".svg", True)
mimetypes.init()
from dotenv import load_dotenv
import os
load_dotenv()

from pathlib import Path

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname((__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent
env_path = os.path.join(BASE_DIR, '.env')
load_dotenv(env_path, override=True)

# Obtiene el ambiente actual
DJANGO_ENV = os.getenv('DJANGO_ENV', 'local')
print(f"DJANGO ENV: {DJANGO_ENV}")

# Carga el archivo específico del ambiente
env_file = f'.env.{DJANGO_ENV}'
env_path = os.path.join(BASE_DIR, env_file)
if os.path.exists(env_path):
    load_dotenv(env_path, override=True)
    print(f"Loaded environment file: {env_file}")

django_env = os.getenv('DJANGO_ENV')
if django_env == 'local':
    load_dotenv('.env.local', override=True)
elif django_env == 'testing':
    load_dotenv('.env.testing', override=True)
else:
    load_dotenv('.env.prod', override=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@$ed=c%zs^ul=x@$au0+p1eppy+lkhe6=eza%n%cp-q6mh1rjt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Hosts permitidos
# ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']
ALLOWED_HOSTS = ["*"]

from config import db
DATABASES = db.DATABASES


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',  # ✅ Requerido para SessionMiddleware
    'rest_framework',
    'corsheaders',
    'api',
    'apirest',
    'auth0authorization',
    'rest_framework_simplejwt'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # ✅ Requerido antes de AuthenticationMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # ✅ Debe ir después de SessionMiddleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',  # ✅ Movido al final
]

ROOT_URLCONF = 'config.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]

WSGI_APPLICATION = 'config.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]

# REST_FRAMEWORK = {
#     'DEFAULT_RENDERER_CLASSES': [
#         'rest_framework.renderers.JSONRenderer',
#     ],
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
# }


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',  # Interfaz web para testing
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'auth0authorization.authentication.CustomJSONWebTokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'django.contrib.auth.backends.RemoteUserBackend',
]
JWT_AUDIENCE = os.getenv('JWT_AUDIENCE', 'localhost/auth/')
JWT_AUTH = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER':
        'auth0authorization.utils.jwt_get_username_from_payload_handler',
    'JWT_DECODE_HANDLER':
        'auth0authorization.utils.jwt_decode_token',
    'JWT_ALGORITHM': 'RS256',
    'JWT_AUDIENCE': JWT_AUDIENCE,
    'JWT_ISSUER': 'https://dev-s6xqi0ox0fk82mwr.us.auth0.com/',
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

# SIMPLE_JWT = {  
#     "ACCESS_TOKEN_LIFETIME": timedelta(days=31),  
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=365),  
#     "ROTATE_REFRESH_TOKENS": False,  
#     "BLACKLIST_AFTER_ROTATION": False,  
#     "UPDATE_LAST_LOGIN": False,  
#     "ALGORITHM": "HS256",  
#     "SIGNING_KEY": SECRET_KEY,  
#     "VERIFYING_KEY": None,  
#     "AUDIENCE": AUTH0_AUDIENCE,  
#     "ISSUER": f"https://{AUTH0_DOMAIN}/",  
#     "JWK_URL": f"https://{AUTH0_DOMAIN}/.well-known/jwks.json",  
#     "LEEWAY": 0,  "AUTH_HEADER_TYPES": ("Bearer",),  
#     "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  
#     "USER_ID_FIELD": "email",  
#     "USER_ID_CLAIM": "email",  
#     "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",  
#     "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),  
#     "TOKEN_TYPE_CLAIM": "token_type",   
#     "JTI_CLAIM": "jti",  
#     "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",  
#     "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),  
#     "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1), 
# }
# Configuración del modelo de usuario personalizado
AUTH_USER_MODEL = 'api.User'